@import url(https://fonts.googleapis.com/css?family=Merriweather:900|Open+Sans&display=swap);
body {
  position: relative;
  background: white;
  overflow-x: hidden;
  font-family: 'Open Sans', sans-serif;
  text-rendering: optimizeLegibility;
  color: #222; }

img, video {
  width: 100%;
  height: auto;
  min-height: 100%;
  display: block;
  -o-object-fit: cover;
     object-fit: cover; }

.blur-up {
  -webkit-filter: blur(8px);
          filter: blur(8px);
  -webkit-transition: -webkit-filter 600ms;
  transition: -webkit-filter 600ms;
  transition: filter 600ms;
  transition: filter 600ms, -webkit-filter 600ms; }
  .blur-up.lazyloaded {
    -webkit-filter: blur(0);
            filter: blur(0); }

*::-moz-selection {
  color: white;
  background: rgba(226, 51, 66, 0.7); }

*::selection {
  color: white;
  background: rgba(226, 51, 66, 0.7); }

p, small, li, h2, h3, h4, h5, h6, input, label, span {
  color: #696969; }

h1, h2, h3, h4, h5, h6 {
  font-family: 'Merriweather', serif; }

h1 {
  color: white;
  font-weight: 900;
  text-shadow: 5px 5px 5px rgba(0, 0, 0, 0.1);
  font-size: 2em; }
  @media (min-width: 1200px) {
    h1 {
      font-size: 3em; } }

p {
  line-height: 1.5;
  font-size: 1.125rem;
  font-weight: 400; }

a {
  text-decoration: none;
  color: #e23342; }
  a:hover {
    text-decoration: underline; }

* {
  box-sizing: border-box; }

.hero {
  position: relative; }
  .hero__image {
    position: relative;
    width: auto;
    height: 90vh;
    overflow: hidden; }
    .hero__image:before {
      position: absolute;
      content: '';
      height: 100%;
      width: 100%;
      background: rgba(0, 0, 0, 0.25);
      z-index: 1; }
  .hero__content {
    display: -webkit-box;
    display: flex;
    -webkit-box-pack: center;
            justify-content: center;
    position: absolute;
    bottom: 2em;
    z-index: 1; }
    .hero__content h1 {
      color: white; }

.blog {
  width: 100%;
  margin: auto;
  -webkit-box-pack: justify;
          justify-content: space-between; }
  @media (min-width: 1200px) {
    .blog {
      width: 90%; } }

.blog_entry {
  display: -webkit-box;
  display: flex;
  flex-wrap: wrap;
  width: 95%;
  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
  padding: .5em;
  margin: 1em auto; }
  @media (min-width: 1200px) {
    .blog_entry {
      width: 49%; } }
  .blog_entry__image {
    width: 100%;
    overflow: hidden; }
    @media (min-width: 1200px) {
      .blog_entry__image {
        height: 45vh; } }
    .blog_entry__image:hover img {
      -webkit-transform: scale(1.05);
              transform: scale(1.05); }
    .blog_entry__image img {
      -webkit-transition: -webkit-transform .5s ease-in-out;
      transition: -webkit-transform .5s ease-in-out;
      transition: transform .5s ease-in-out;
      transition: transform .5s ease-in-out, -webkit-transform .5s ease-in-out; }
  .blog_entry__text {
    width: 100%;
    display: -webkit-box;
    display: flex;
    flex-wrap: wrap;
    -webkit-box-align: start;
            align-items: flex-start; }
    .blog_entry__text__title {
      width: 100%; }
      .blog_entry__text__title a {
        text-decoration: none; }
    .blog_entry__text__details {
      width: 100%; }
      .blog_entry__text__details span {
        font-weight: 700; }
    .blog_entry__text__summary {
      width: 100%; }
      .blog_entry__text__summary a {
        text-decoration: none; }
  .blog_entry--first {
    -webkit-box-pack: justify;
            justify-content: space-between; }
    @media (min-width: 1200px) {
      .blog_entry--first {
        width: 100%; } }
    .blog_entry--first .blog_entry__image {
      width: 100%; }
      @media (min-width: 1200px) {
        .blog_entry--first .blog_entry__image {
          width: 40%; } }
    .blog_entry--first .blog_entry__text {
      width: 100%; }
      @media (min-width: 1200px) {
        .blog_entry--first .blog_entry__text {
          width: 59%; } }


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYmFzZS9fZ2xvYmFsLnNjc3MiLCJ3ZWJwYWNrOi8vL2Jhc2UvX3ZhcmlhYmxlcy5zY3NzIiwid2VicGFjazovLy9iYXNlL19taXhpbnMuc2NzcyIsIndlYnBhY2s6Ly8vbW9kdWxlcy9ibG9nL19oZXJvLnNjc3MiLCJ3ZWJwYWNrOi8vL21vZHVsZXMvYmxvZy9fYmxvZy5zY3NzIiwid2VicGFjazovLy9tb2R1bGVzL2Jsb2cvX2Jsb2dfZW50cnkuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7RUFDSSxrQkFBa0I7RUFDbEIsaUJBQWlCO0VBQ2pCLGtCQUFrQjtFQUNsQixvQ0FBb0M7RUFDcEMsa0NBQWtDO0VBQ2xDLFdDSFc7O0FETWY7RUFDSSxXQUFXO0VBQ1gsWUFBWTtFQUNaLGdCQUFnQjtFQUNoQixjQUFjO0VBQ2Qsb0JBQWlCO0tBQWpCLGlCQUFpQjs7QUFHckI7RUFDSSx5QkFBaUI7VUFBakIsaUJBQWlCO0VBQ2pCLHdDQUF3QjtFQUF4QixnQ0FBd0I7RUFBeEIsd0JBQXdCO0VBQXhCLDhDQUF3QjtFQUY1QjtJQUtRLHVCQUFlO1lBQWYsZUFBZTs7QUFJdkI7RUFDSSxZQUFZO0VBQ1osa0NDN0JhOztBRDJCakI7RUFDSSxZQUFZO0VBQ1osa0NDN0JhOztBRGdDakI7RUFDSSxjQy9CbUI7O0FEa0N2QjtFQUNJLGtDQUFrQzs7QUFHdEM7RUFDSSxZQUFZO0VBQ1osZ0JBQWdCO0VBQ2hCLDJDQUFtQztFQUNuQyxjQUFjO0VFckNkO0lGaUNKO01BT1EsY0FBYyxJQUVyQjs7QUFFRDtFQUNJLGdCQUFnQjtFQUNoQixtQkFBbUI7RUFDbkIsZ0JBQWdCOztBQUdwQjtFQUNJLHFCQUFxQjtFQUNyQixjQzNEYTtFRHlEakI7SUFLUSwwQkFBMEI7O0FBSWxDO0VBQ0ksc0JBQXNCOztBR25FMUI7RUFDSSxrQkFBa0I7RUFFbEI7SUFDSSxrQkFBa0I7SUFDbEIsV0FBVztJQUNYLFlBQVk7SUFDWixnQkFBZ0I7SUFKbkI7TUFPTyxrQkFBa0I7TUFDbEIsV0FBVztNQUNYLFlBQVk7TUFDWixXQUFXO01BQ1gsK0JBQXNCO01BQ3RCLFVBQVU7RUFJbEI7SUFDSSxvQkFBYTtJQUFiLGFBQWE7SUFDYix3QkFBdUI7WUFBdkIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtJQUNsQixXQUFXO0lBQ1gsVUFBVTtJQUxiO01BUU8sWUFBWTs7QUMzQnhCO0VBQ0ksV0FBVztFQUNYLFlBQVk7RUFDWix5QkFBOEI7VUFBOUIsOEJBQThCO0VGSTlCO0lFUEo7TUFNUSxVQUFVLElBRWpCOztBQ1JEO0VBQ0ksb0JBQWE7RUFBYixhQUFhO0VBQ2IsZUFBZTtFQUNmLFVBQVU7RUFDViwyQ0FBbUM7RUFDbkMsYUFBYTtFQUNiLGdCQUFnQjtFSENoQjtJR1BKO01BU1EsVUFBVSxJQTZFakI7RUExRUc7SUFDSSxXQUFXO0lBQ1gsZ0JBQWdCO0lIUHBCO01HS0E7UUFLUSxZQUFZLElBYW5CO0lBbEJBO01BVVcsOEJBQXNCO2NBQXRCLHNCQUFzQjtJQVZqQztNQWVPLHFEQUFxQztNQUFyQyw2Q0FBcUM7TUFBckMscUNBQXFDO01BQXJDLHdFQUFxQztFQUs3QztJQUNJLFdBQVc7SUFDWCxvQkFBYTtJQUFiLGFBQWE7SUFDYixlQUFlO0lBQ2Ysd0JBQXVCO1lBQXZCLHVCQUF1QjtJQUV2QjtNQUNJLFdBQVc7TUFEZDtRQUlPLHFCQUFxQjtJQUk3QjtNQUNJLFdBQVc7TUFEZDtRQUlPLGdCQUFnQjtJQUt4QjtNQUNJLFdBQVc7TUFEZDtRQUlPLHFCQUFxQjtFQUtqQztJQUNJLHlCQUE4QjtZQUE5Qiw4QkFBOEI7SUgxRGxDO01HeURBO1FBSVEsV0FBVyxJQWlCbEI7SUFyQkE7TUFRTyxXQUFXO01IakVuQjtRR3lEQztVQVdXLFVBQVUsSUFFakI7SUFiSjtNQWVPLFdBQVc7TUh4RW5CO1FHeURDO1VBa0JXLFVBQVUsSUFFakIiLCJmaWxlIjoiYmxvZy5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU1lcnJpd2VhdGhlcjo5MDB8T3BlbitTYW5zJmRpc3BsYXk9c3dhcCcpO1xyXG5ib2R5e1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbiAgICBmb250LWZhbWlseTogJ09wZW4gU2FucycsIHNhbnMtc2VyaWY7XHJcbiAgICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xyXG4gICAgY29sb3I6ICRtYWluRGFyaztcclxufVxyXG5cclxuaW1nLCB2aWRlb3tcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgbWluLWhlaWdodDogMTAwJTtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgb2JqZWN0LWZpdDogY292ZXI7XHJcbn1cclxuXHJcbi5ibHVyLXVwIHtcclxuICAgIGZpbHRlcjogYmx1cig4cHgpO1xyXG4gICAgdHJhbnNpdGlvbjogZmlsdGVyIDYwMG1zO1xyXG5cclxuICAgICYubGF6eWxvYWRlZCB7XHJcbiAgICAgICAgZmlsdGVyOiBibHVyKDApO1xyXG4gICAgfVxyXG59XHJcblxyXG4qOjpzZWxlY3Rpb24ge1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgYmFja2dyb3VuZDogcmdiYSgkbWFpblJlZCwgMC43KTtcclxufVxyXG5cclxucCwgc21hbGwsIGxpLCBoMiwgaDMsIGg0LCBoNSwgaDYsIGlucHV0LCBsYWJlbCwgc3BhbntcclxuICAgIGNvbG9yOiAkbWFpbkxpZ2h0R3JleTtcclxufVxyXG5cclxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNntcclxuICAgIGZvbnQtZmFtaWx5OiAnTWVycml3ZWF0aGVyJywgc2VyaWY7XHJcbn1cclxuXHJcbmgxe1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcclxuICAgIHRleHQtc2hhZG93OiA1cHggNXB4IDVweCByZ2JhKGJsYWNrLCAuMSk7XHJcbiAgICBmb250LXNpemU6IDJlbTtcclxuXHJcbiAgICBAaW5jbHVkZSBhdExhcmdle1xyXG4gICAgICAgIGZvbnQtc2l6ZTogM2VtO1xyXG4gICAgfVxyXG59XHJcblxyXG5we1xyXG4gICAgbGluZS1oZWlnaHQ6IDEuNTtcclxuICAgIGZvbnQtc2l6ZTogMS4xMjVyZW07XHJcbiAgICBmb250LXdlaWdodDogNDAwO1xyXG59XHJcblxyXG5he1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgY29sb3I6ICRtYWluUmVkO1xyXG5cclxuICAgICY6aG92ZXJ7XHJcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XHJcbiAgICB9XHJcbn1cclxuXHJcbip7XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcbiIsIiRtYWluUmVkOiAjZTIzMzQyO1xyXG4kbWFpbkRhcmtSZWQ6IHJnYmEoMTM1LCA0NywgNDcsIDAuOSk7XHJcbiRtYWluTGlnaHRHcmV5OiAjNjk2OTY5O1xyXG4kbWFpbkxpZ2h0RGFyazogIzMzMztcclxuJG1haW5EYXJrOiAjMjIyO1xyXG4iLCJAbWl4aW4gYXRNZWRpdW0ge1xuICAgIEBtZWRpYSAobWluLXdpZHRoOiA4MDBweCkge1xuICAgICAgICBAY29udGVudDtcbiAgICB9XG59XG5cbkBtaXhpbiBhdExhcmdlIHtcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XG4gICAgICAgIEBjb250ZW50O1xuICAgIH1cbn1cbiIsIi5oZXJve1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG5cclxuICAgICZfX2ltYWdle1xyXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICB3aWR0aDogYXV0bztcclxuICAgICAgICBoZWlnaHQ6IDkwdmg7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuXHJcbiAgICAgICAgJjpiZWZvcmV7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICAgY29udGVudDogJyc7XHJcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoYmxhY2ssIC4yNSk7XHJcbiAgICAgICAgICAgIHotaW5kZXg6IDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICZfX2NvbnRlbnR7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgYm90dG9tOiAyZW07XHJcbiAgICAgICAgei1pbmRleDogMTtcclxuXHJcbiAgICAgICAgJiBoMXtcclxuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi5ibG9ne1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBtYXJnaW46IGF1dG87XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcblxyXG4gICAgQGluY2x1ZGUgYXRMYXJnZXtcclxuICAgICAgICB3aWR0aDogOTAlO1xyXG4gICAgfVxyXG59IiwiLmJsb2dfZW50cnl7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC13cmFwOiB3cmFwO1xyXG4gICAgd2lkdGg6IDk1JTtcclxuICAgIGJveC1zaGFkb3c6IDJweCAycHggMTBweCByZ2JhKGJsYWNrLCAuMSk7XHJcbiAgICBwYWRkaW5nOiAuNWVtO1xyXG4gICAgbWFyZ2luOiAxZW0gYXV0bztcclxuXHJcbiAgICBAaW5jbHVkZSBhdExhcmdle1xyXG4gICAgICAgIHdpZHRoOiA0OSU7XHJcbiAgICB9XHJcblxyXG4gICAgJl9faW1hZ2V7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuXHJcbiAgICAgICAgQGluY2x1ZGUgYXRMYXJnZXtcclxuICAgICAgICAgICAgaGVpZ2h0OiA0NXZoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJjpob3ZlcntcclxuICAgICAgICAgICAgJiBpbWd7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMDUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmIGltZ3tcclxuICAgICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIC41cyBlYXNlLWluLW91dDtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICZfX3RleHR7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XHJcblxyXG4gICAgICAgICZfX3RpdGxle1xyXG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuXHJcbiAgICAgICAgICAgICYgYXtcclxuICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fZGV0YWlsc3tcclxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcblxyXG4gICAgICAgICAgICAmIHNwYW57XHJcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fc3VtbWFyeXtcclxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcblxyXG4gICAgICAgICAgICAmIGF7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJi0tZmlyc3R7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG5cclxuICAgICAgICBAaW5jbHVkZSBhdExhcmdle1xyXG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYgLmJsb2dfZW50cnlfX2ltYWdle1xyXG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuXHJcbiAgICAgICAgICAgIEBpbmNsdWRlIGF0TGFyZ2V7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNDAlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgICYgLmJsb2dfZW50cnlfX3RleHR7XHJcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG5cclxuICAgICAgICAgICAgQGluY2x1ZGUgYXRMYXJnZXtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA1OSU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9*/